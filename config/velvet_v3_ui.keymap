#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include "keys_ru.h"
#include <dt-bindings/zmk/behaviors.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_ctrl_ent {
            bindings = <&kp LC(ENTER)>;
            key-positions = <2 4>;
            require-prior-idle-ms = <50>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <3 2>;
            require-prior-idle-ms = <50>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            require-prior-idle-ms = <70>;
            timeout-ms = <25>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <26 27>;
            require-prior-idle-ms = <50>;
        };

        combo_ru {
            bindings = <&lg_ru>;
            key-positions = <27 28>;
            require-prior-idle-ms = <50>;
        };

        combo_en {
            bindings = <&lg_en>;
            key-positions = <31 32>;
            require-prior-idle-ms = <50>;
        };

        combo_osl_sym_en {
            bindings = <&sl 15>;
            key-positions = <19 20>;
            require-prior-idle-ms = <50>;
            layers = <2 3 15 0 1>;
        };

        combo_quotes_en {
            bindings = <&quotes_en>;
            require-prior-idle-ms = <50>;
            key-positions = <31 33>;
            layers = <2 3 0 1>;
        };

        combo_osl_sym_ru {
            bindings = <&sl 16>;
            key-positions = <19 20>;
            require-prior-idle-ms = <50>;
            layers = <5 16 4>;
        };

        combo_quotes_ru {
            bindings = <&quotes_ru>;
            key-positions = <31 33>;
            require-prior-idle-ms = <50>;
            layers = <5 4 16>;
        };

        combo_braces_en {
            bindings = <&braces_en>;
            key-positions = <19 21>;
            require-prior-idle-ms = <50>;
            layers = <2 3 0 1 15>;
        };

        combo_yi_ru {
            bindings = <&kp RU_CYRILLIC_SHORT_I>;
            timeout-ms = <30>;
            key-positions = <20 21>;
            layers = <4>;
        };

        combo_she_ru {
            bindings = <&kp RU_CYRILLIC_SHA>;
            timeout-ms = <30>;
            key-positions = <32 33>;
            layers = <4>;
        };

        combo_scha_ru {
            bindings = <&kp RU_CYRILLIC_SHCHA>;
            timeout-ms = <30>;
            key-positions = <8 9>;
            layers = <4>;
        };

        combo_yi_cw {
            bindings = <&kp LS(RU_CYRILLIC_SHORT_I)>;
            timeout-ms = <30>;
            key-positions = <20 21>;
            layers = <5>;
        };

        combo_she_cw {
            bindings = <&kp LS(RU_CYRILLIC_SHA)>;
            timeout-ms = <30>;
            key-positions = <32 33>;
            layers = <5>;
        };

        combo_scha_cw {
            bindings = <&kp LS(RU_CYRILLIC_SHCHA)>;
            timeout-ms = <30>;
            key-positions = <8 9>;
            layers = <5>;
        };

        combo_capsword_en {
            bindings = <&to 3>;
            key-positions = <14 13>;
            layers = <2 3>;
            timeout-ms = <30>;
        };

        combo_osl_fn {
            bindings = <&sl 17>;
            key-positions = <26 28>;
            require-prior-idle-ms = <50>;
        };

        combo_osl_os {
            bindings = <&sl 18>;
            key-positions = <25 26>;
            require-prior-idle-ms = <50>;
        };

        combo_capsword_ru {
            bindings = <&to 5>;
            key-positions = <14 13>;
            layers = <5 4>;
            timeout-ms = <30>;
        };

        combo_yo_ru {
            bindings = <&kp RU_CYRILLIC_IO>;
            key-positions = <21 22>;
            layers = <4>;
            timeout-ms = <30>;
        };

        combo_yo_cw_ru {
            bindings = <&kp LS(RU_CYRILLIC_IO)>;
            key-positions = <21 22>;
            layers = <5>;
            timeout-ms = <30>;
        };

        combo_yo_en {
            bindings = <&ru RU_CYRILLIC_IO>;
            key-positions = <21 22>;
            layers = <2 0>;
            timeout-ms = <30>;
        };

        combo_q_en {
            bindings = <&kp Q>;
            key-positions = <4 3>;
            layers = <2 0>;
            timeout-ms = <30>;
        };

        combo_p_en {
            bindings = <&kp P>;
            key-positions = <8 7>;
            layers = <2>;
            timeout-ms = <30>;
        };

        combo_q_cw {
            bindings = <&kp LS(Q)>;
            key-positions = <4 3>;
            layers = <3 1>;
            timeout-ms = <30>;
        };

        combo_p_cw {
            bindings = <&kp LS(P)>;
            key-positions = <7 8>;
            layers = <3>;
            timeout-ms = <30>;
        };

        combo_tse_ru {
            bindings = <&kp RU_CYRILLIC_TSE>;
            key-positions = <3 4>;
            layers = <4>;
            timeout-ms = <30>;
        };

        combo_tse_cw {
            bindings = <&kp LS(RU_CYRILLIC_TSE)>;
            key-positions = <3 4>;
            layers = <5>;
            timeout-ms = <30>;
        };

        combo_che_ru {
            bindings = <&kp RU_CYRILLIC_CHE>;
            key-positions = <7 8>;
            layers = <4>;
            timeout-ms = <30>;
        };

        combo_che_cw {
            bindings = <&kp LS(RU_CYRILLIC_CHE)>;
            key-positions = <7 8>;
            layers = <5>;
            timeout-ms = <30>;
        };

        combo_osm_ctrl_shift {
            bindings = <&osm_ctrl_shift>;
            key-positions = <16 17>;
            require-prior-idle-ms = <70>;
            timeout-ms = <25>;
            layers = <2 4 3 5 0 1 6>;
        };

        parentheses {
            bindings = <&parentheses>;
            key-positions = <14 16>;
            require-prior-idle-ms = <70>;
            timeout-ms = <25>;
        };

        combo_braces_ru {
            bindings = <&braces_ru>;
            key-positions = <19 21>;
            require-prior-idle-ms = <70>;
            timeout-ms = <25>;
            layers = <4 5 16>;
        };

        combo_brackets_en {
            bindings = <&brackets_en>;
            key-positions = <7 9>;
            layers = <2 3 0 1 15>;
            timeout-ms = <30>;
        };

        combo_brackets_ru {
            bindings = <&brackets_ru>;
            key-positions = <7 9>;
            layers = <4 5 16>;
            timeout-ms = <30>;
        };

        combo_osm_ctrl {
            bindings = <&osm_ctrl>;
            key-positions = <15 16>;
            layers = <2 3 0 1 4 5 6>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <4 5>;
        };

        combo_grave_ru {
            bindings = <&en GRAVE>;
            key-positions = <18 19>;
            layers = <4 5 16>;
        };

        combo_grave_en {
            bindings = <&kp GRAVE>;
            key-positions = <18 19>;
            layers = <2 3 0 1 15>;
        };

        combo_under_en {
            bindings = <&kp UNDER>;
            key-positions = <7 6>;
            layers = <3 2 0 1 15>;
        };

        combo_under_ru {
            bindings = <&kp UNDER>;
            key-positions = <6 7>;
            layers = <4 5 16>;
        };

        combo_capsword_colemak {
            bindings = <&to 1>;
            key-positions = <13 14>;
            layers = <0 1>;
        };

        combo_ru_hash {
            bindings = <&en HASH>;
            key-positions = <30 31>;
            layers = <4 5 16>;
        };

        combo_en_hash {
            bindings = <&kp HASH>;
            key-positions = <30 31>;
            layers = <2 0 1 3 15>;
        };
    };

    macros {
        lg_ru: lg_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 4 &os_ru>;
            label = "LG_RU";
            tap-ms = <0>;
            wait-ms = <0>;
        };

        lg_en: lg_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &os_en>;
            label = "LG_EN";
            tap-ms = <0>;
            wait-ms = <0>;
        };

        os_ru: os_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 15>,
                <&kp LC(LS(N8))>,
                <&macro_wait_time 15>;

            label = "OS_RU";
            tap-ms = <30>;
        };

        os_en: os_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 15>,
                <&kp LC(LS(N9))>,
                <&macro_wait_time 15>;

            label = "OS_EN";
            tap-ms = <30>;
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_wait_time 30>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "ALT_TAB";
            tap-ms = <30>;
        };

        select_row: select_row {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "SELECT_ROW";
        };

        en_code: en_code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp RETURN &kp RET>,
                <&macro_wait_time 10>,
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp UP_ARROW>;

            label = "EN_CODE_BLOCK";
        };

        ru_code: ru_code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en &kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp RETURN &kp RET>,
                <&macro_wait_time 10>,
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp UP_ARROW &os_ru>;

            label = "RU_CODE";
        };

        ru_cw_off: ru_cw_off {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &to 4>;
            label = "RU_CW_OFF";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        en_cw_off: en_cw_off {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &to 0>;
            label = "EN_CW_OFF";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        zeros_macro: zeros_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N0 &kp N0 &kp N0 &kp N0>;
            label = "ZEROS_MACRO";
            tap-ms = <350>;
        };

        osm_ctrl_shift: osm_ctrl_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LS(LCTRL) &sl 11>;
            label = "OSM_CTRL_SHIFT";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        ml: ml {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1 &key_on MACRO_PLACEHOLDER &layer_on 11>,
                <&macro_pause_for_release>,
                <&macro_param_1to1 &key_off MACRO_PLACEHOLDER &layer_off 11>;

            label = "Mod Layer";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        quotes_ru: dbl_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_2) &kp LS(NUMBER_2) &kp LEFT_ARROW>;
            label = "DBL_QUOTE";
        };

        quotes_en: quotes_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT_ARROW>;
            label = "QUOTES_EN";
        };

        braces_en: braces_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "BRACES_EN";
        };

        braces_ru: braces_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&os_en &braces_en &os_ru>;
            label = "BRACES_RU";
        };

        brackets_en: brackets_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKETS_EN";
        };

        brackets_ru: brackets_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&os_en &brackets_en &os_ru>;
            label = "BRACKETS_RU";
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "PARENTHESES";
        };

        less_greater_en: less_greater_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT>;
            label = "LESS_GREATER_EN";
        };

        less_greater_ru: less_greater_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&os_en &less_greater_en &os_ru>;
            label = "LESS_GREATER_RU";
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&os_en &macro_param_1to1 &kp MACRO_PLACEHOLDER &os_ru>;
            label = "EN";
        };

        ru: ru {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&os_ru &macro_param_1to1 &kp MACRO_PLACEHOLDER &os_en>;
            label = "RU";
        };

        osm_ctrl: osm_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LCTRL &sl 11>;
            label = "OSM_CTRL";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        sync_lg: sync_lg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 4>;
            label = "SYNC_LG";
        };

        alt_spc: alt_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE) &layer_off 6>;
            label = "ALT_SPC";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        bspc_msoff: bspc_msoff {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&layer_off 6 &bspc_morph>;
            label = "BSPC_MSOFF";
            tap-ms = <0>;
            wait-ms = <0>;
        };

        trns_msoff: trns_msoff {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&trans>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&trans>,
                <&macro_tap>,
                <&layer_off 6>;

            label = "TRNS_MSOFF";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        kp_msoff: kp_msoff {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&layer_off 6>,
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "KP_MSOFF";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        scroll_hold: scroll_hold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp KP_NUMLOCK>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp KP_NUMLOCK>;

            label = "SCROLL_HOLD";
            tap-ms = <0>;
        };

        kp_layeroff: cancel_msoff {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &layer_off MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "CANCEL_MSOFF";
        };

        mkp1_ctrl: mkp1_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mkp MB1 &mo 9>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mkp MB1 &mo 9>;

            label = "MKP1_CTRL";
            wait-ms = <0>;
            tap-ms = <0>;
        };
    };

    behaviors {
        layer_off: layer_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "LAYER_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mod";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            require-prior-idle-ms = <20>;
        };

        hrm_slow: hrm_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM for slow fingers";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            require-prior-idle-ms = <20>;
        };

        ru_lt_cw_off: ru_lt_cw_off {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_LT_CW_OFF";
            bindings = <&mo>, <&ru_cw_off>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        en_lt_cw_off: en_lt_cw_off {
            compatible = "zmk,behavior-hold-tap";
            label = "EN_LT_CW_OFF";
            bindings = <&mo>, <&en_cw_off>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        hrl: hrl {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Layer";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        lt_bspc: lt_bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT with quick tap and mod morph";
            bindings = <&mo>, <&bspc_msoff>;

            #binding-cells = <2>;
            quick-tap-ms = <180>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        bspc_morph: bspc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_MORPH";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        key_on: key_on {
            compatible = "zmk,behavior-key-toggle";
            label = "KEY_ON";
            #binding-cells = <1>;
        };

        key_off: key_off {
            compatible = "zmk,behavior-key-toggle";
            label = "KEY_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mod Layer";
            bindings = <&ml>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            require-prior-idle-ms = <20>;
        };

        layer_on: layer_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "LAYER_ON";
            #binding-cells = <1>;
            toggle-mode = "on";
        };

        hrml_slow: hrml_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML for slow fingers";
            bindings = <&ml>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <20>;
        };

        soft_sign: soft_sign {
            compatible = "zmk,behavior-mod-morph";
            label = "SOFT_SIGN";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        en_dot_excl: en_dot_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "EN_DOT_EXCL";
            bindings = <&en_cw_off DOT>, <&en_cw_off EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        en_com_ques: en_com_ques {
            compatible = "zmk,behavior-mod-morph";
            label = "EN_COM_QUES";
            bindings = <&en_cw_off COMMA>, <&en_cw_off QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ru_dot_excl: ru_dot_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_DOT_EXCL";
            bindings = <&ru_cw_off RU_DOT>, <&ru_cw_off EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ru_com_ques: ru_com_ques {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_COM_QUES";
            bindings = <&ru_cw_off RU_COMMA>, <&ru_cw_off RU_QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        f_morph: f_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "F_MORPH";
            bindings = <&kp F>, <&kp E>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };

        i_morph: i_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "I_MORPH";
            bindings = <&kp I>, <&kp L>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };

        mkp_hold: mkp_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "MKP_HOLD";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        key_tog: key_tog {
            compatible = "zmk,behavior-key-toggle";
            label = "KEY_TOG";
            #binding-cells = <1>;
            toggle-mode = "flip";
        };

        trns_msoff_hold: trns_msoff_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TRNS_MSOFF_HOLD";
            bindings = <&kp>, <&trns_msoff>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        mkp_hold_msoff: mkp_hold_msoff {
            compatible = "zmk,behavior-hold-tap";
            label = "MKP_HOLD_MSOFF";
            bindings = <&kp_msoff>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        trans_msoff_lr_hold: trans_msoff_lr_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TRANS_MSOFF_LR_HOLD";
            bindings = <&mo>, <&trns_msoff>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        cap_sen: cap_sen {
            compatible = "zmk,behavior-hold-tap";
            label = "CAP_SEN";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <125>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&none    &kp Q  &kp W      &kp E     &kp R      &kp T                        &kp Y  &kp U           &kp I      &kp O     &kp P     &none
&none    &kp A  &kp S      &kp D     &kp F      &kp G                        &kp H  &kp J           &kp K      &kp L     &kp SEMI  &none
&none    &kp Z  &kp X      &kp C     &kp V      &kp B                        &kp N  &kp M           &kp COMMA  &kp DOT   &kp LALT  &none
                  &kp GRAVE  &kp LGUI  &kp LCTRL  &mo 1  &kp SPACE    &kp RET  &mo 2  &cap_sen 4 MB1  &kp LBKT   &kp RBKT
            >;

            label = "Base";
        };

        Navigation {
            bindings = <
&trans  &kp N1  &kp N2    &kp N3   &kp N4   &kp N5                     &kp N6    &kp N7        &kp N8         &kp N9       &kp N0         &trans
&trans  &trans  &trans    &trans   &trans   &kp RET                    &trans    &kp LEFT      &kp DOWN       &kp UP       &kp RIGHT      &trans
&trans  &trans  &kp HOME  &kp INS  &kp END  &kp DEL                    &kp CLCK  &kp LC(LEFT)  &kp PAGE_DOWN  &kp PAGE_UP  &kp LC(RIGHT)  &trans
                &trans    &trans   &trans   &trans   &trans    &trans  &mo 3     &trans        &trans         &trans
            >;

            label = "Navigation";
        };

        Symbols {
            bindings = <
&trans  &trans    &kp LT    &kp EQUAL  &kp GT    &kp GRAVE                      &kp CARET  &kp DQT   &kp UNDER  &kp SQT   &trans    &trans
&trans  &kp BSLH  &kp LPAR  &kp MINUS  &kp RPAR  &kp PLUS                       &kp PRCNT  &kp LBRC  &kp SEMI   &kp RBRC  &kp EXCL  &trans
&trans  &trans    &kp STAR  &kp SEMI   &kp FSLH  &kp DLLR                       &kp AT     &kp PIPE  &kp TILDE  &kp AMPS  &trans    &trans
                  &trans    &trans     &trans    &mo 3      &kp HASH    &trans  &trans     &trans    &trans     &trans
            >;

            label = "Symbols";
        };

        Adjust {
            bindings = <
&none  &none  &kp F1  &kp F2   &kp F3   &kp F4                   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4  &none
&none  &none  &kp F5  &kp F6   &kp F7   &kp F8                   &out OUT_BLE  &kp C_VOL_DN  &kp K_MUTE        &kp C_VOL_UP  &none         &none
&none  &none  &kp F9  &kp F10  &kp F11  &kp F12                  &out OUT_USB  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &none         &none
                    &none   &none    &none    &none    &none    &none  &none         &none         &none             &none
            >;

            label = "Adjust";
        };

        Mouse {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &mo 5   &mkp MB3  &mkp MB2  &mkp MB1  &mo 6                     &mo 6   &mkp MB1  &mkp MB2  &mkp MB3  &mo 5   &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };

        Scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        Sniper {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &mkp MB3  &mkp MB2  &mkp MB1  &trans                    &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };

        User0 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            label = "User0";
        };

        User1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            label = "User1";
        };

        User2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            label = "User2";
        };

        User3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            label = "User3";
        };
    };
};

&trackball_listener {
    input-processors = <&zip_xy_scaler 1 2>;

    scroller {
        layers = <2 5>;
        input-processors = <&zip_xy_scaler 1 32>, <&zip_xy_to_scroll_mapper>;
    };

    sniper {
        layers = <1 6>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};
